arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
library(arbutus)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
arbutus::arbutus(sim_fit)
devtools::load_all(".")
arbutus::arbutus(sim_fit)
devtools::load_all(".")
arbutus::arbutus(sim_fit)
devtools::load_all(".")
arbutus::arbutus(sim_fit)
sim_fit[["solution"]]
library(arbutus)
arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
#arbutus::arbutus(sim_fit)
make_unit_tree(sim_fit)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
model_info(sim_fit)
model_pars(sim_fit)
model_info(sim_fit)
make_model_phylo(model_info(sim_fit))
a <- make_model_phylo(model_info(sim_fit))
View(a)
a <- model_info(sim_fit)
View(a)
a <- make_model_phylo.fitOU(model_info(sim_fit))
devtools::document()
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
devtools::load_all(".")
library(arbutus)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
a$data$data
a$type
a$data$phy
a$pars
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
#Make nodes correspond to selective regimes
tree2 <- sim.bdtree(n = 10)
tree2$node.label <- c(rep.int(1, 5), rep.int(2, (10-6)))
plot.phylo(tree2, show.node.label = TRUE)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
#Make dataframe
df_species <- tree$tip.label
df_regime <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 39))
df <- data.frame(df_species, df_regime) %>% rename(Genus_species = df_species, Reg = df_regime)
#Now sim
sim_dat <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
#Fit the data
sim_fit <- OUwie(phy = tree, data = sim_dat, model = "BMS")
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
devtools::document()
library(arbutus)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
a <- model_info(sim_fit)
View(a)
detach("package:arbutus", unload = TRUE)
library(arbutus)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
library(arbutus)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
remove.packages("arbutus", lib="~/R/win-library/4.1")
library(arbutus)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
?environment
devtools::missing_s3()
devtools::uninstall()
library(arbutus)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
arbutus
test <- make_unit_tree(sim_fit)
View(a)
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
View(sim_dat)
View(sim_fit)
View(sim_fit)
sim_fit[["data"]]
sim_fit[["data"]][[2]]
sim_fit[["data"]][[1]]
a$data
a$data[[2]]
a$data[2]
a$data[,2]
a$data[,1]
a$data[1,]
a$data$data
a$data$data[[2]]
a$data$data[2]
a$data$data <- a$data$data[2]
View(a)
devtools::load_all()
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
library(arbutus)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
dim(a$data$data)
b <- a$data$data
b <- a$data$data %>% as.numeric()
a$data$data
class(b)
typeof(b)
c <- 1:6
dim(c)
a$data$data[[1]]
a$data$data[[1]] %>% dim()
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
library(arbutus)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
library(arbutus)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
View(a)
a$data$data <- a$data$data[[1]]
View(a)
devtools::reload()
devtools::load_all()
library(arbutus)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
model_data.OUwie <- function(fit, ...) {
fit$data$data <- fit$data$data[[2]]
ret <- list(phy=fit$phy, data=fit$data)
ret
}
test <- model_data.OUwie(sim_fit)
View(test)
View(sim_fit)
devtools::load_all()
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
#Make nodes correspond to selective regimes
tree2 <- sim.bdtree(n = 10)
tree2$node.label <- c(rep.int(1, 5), rep.int(2, (10-6)))
plot.phylo(tree2, show.node.label = TRUE)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
#tree <- stree(128, type = "balanced", tip.label = as.character(c(1:128))) %>% compute.brlen()
tree <- sim.bdtree(n = 128, seed = 69)
plot(tree)
#Make nodes correspond to selective regimes
tree2 <- sim.bdtree(n = 10)
tree2$node.label <- c(rep.int(1, 5), rep.int(2, (10-6)))
plot.phylo(tree2, show.node.label = TRUE)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
#Make dataframe
df_species <- tree$tip.label
df_regime <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 39))
df <- data.frame(df_species, df_regime) %>% rename(Genus_species = df_species, Reg = df_regime)
#Now sim
sim_dat <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
#Fit the data
sim_fit <- OUwie(phy = tree, data = sim_dat, model = "BMS")
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
sim_fit$data[,2]
sim_fit$data
sim_fit$data[[2]]
sim_fit$data[2]
test <- sim_fit$data[2]
View(test)
sim_fit$data[,2]
sim_fit$data[[,2]]
sim_fit$data[[2]]
sim_fit$data[,1]
sim_fit$data[,2]
sim_fit$data[,2]
sim_fit$data[[2]]
View(test)
test$data...3.
test[1]
sim_fit$data[2][1]
devtools::load_all()
library(arbutus)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
test <- sim_fit$data[2][1]
View(test)
test <- sim_fit$data[2]
test <- sim_fit$data[[2]]
names(test) <- names(sim_fit$data)
names(sim_fit$data)
names(sim_fit$data[2])
rownames(sim_fit$data)
names(test) <- rownames(sim_fit$data)
dim(test)
a <- sim_fit$data[[2]]
names(a) <- rownames(sim_fit$data)
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
class(sim_fit) <- "OUwie"
arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
#tree <- stree(128, type = "balanced", tip.label = as.character(c(1:128))) %>% compute.brlen()
tree <- sim.bdtree(n = 128, seed = 69)
plot(tree)
#Make nodes correspond to selective regimes
tree2 <- sim.bdtree(n = 10)
tree2$node.label <- c(rep.int(1, 5), rep.int(2, (10-6)))
plot.phylo(tree2, show.node.label = TRUE)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
#Make dataframe
df_species <- tree$tip.label
df_regime <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 39))
df <- data.frame(df_species, df_regime) %>% rename(Genus_species = df_species, Reg = df_regime)
#Now sim
sim_dat <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
#Fit the data
sim_fit <- OUwie(phy = tree, data = sim_dat, model = "BMS")
model_type.OUwie <- function(fit, ...){
ret <- fit$model
if (is.null(ret) || !is.character(ret) || length(ret) != 1)
stop("Failed to extract model type from OUwie fit")
ret
}
model_data.OUwie <- function(fit, ...) {
list(phy=fit$phy, data=fit$data)
}
model_pars.OUwie <- function(fit, ...) {
list(sigsq = fit$solution["sigma.sq",], SE = fit$solution.se)
}
#' @method model_info gfit
#' @export
model_info.OUwie <- function(fit, ...) {
m <- list(data=model_data(fit),
pars=model_pars(fit),
type=model_type(fit))
class(m) <- "fitOU"
m
}
#To add to internal.R script
parnames.bms <- function()
c("sigsq", "SE")
make_model_phylo.fitOU <- function(x, ...){
## get model
model <- x$type
## get tree
phy <- x$data$phy
## get parameters
pars <- x$pars
## Translation function; all have argument list (phy, pars)
tr <- switch(model,
BMS=model_phylo_bms)
if (is.data.frame(pars)) {
rphy <- lapply(seq_len(nrow(pars)), function(i)
tr(phy, pars[i,]))
class(rphy) <- "multiPhylo"
} else {
rphy <- tr(phy, pars)
}
## return rescaled phylogeny
rphy
}
model_phylo_bms <- function(phy, pars){
if (any(pars$sigsq < 0))
stop("Parameters need to be non-negative")
n = length(pars$sigsq)
for(reg in 1:n){
for(node in 1:phy$Nnode){
if(phy$node.label[node] == reg){
phy$edge.length[which(phy$edge[,1] == node + length(phy$tip.label))] <-    phy$edge.length[which(phy$edge[,1] == node + length(phy$tip.label))] * pars$sigsq[reg]^2
}
}
}
ifelse(!is.null(pars$SE), phy = model_phylo_ouse(phy, pars), phy = phy)
phy
}
library(ape)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(geiger)
library(OUwie)
library(tidyverse)
#tree <- stree(128, type = "balanced", tip.label = as.character(c(1:128))) %>% compute.brlen()
tree <- sim.bdtree(n = 128, seed = 69)
plot(tree)
#Make nodes correspond to selective regimes
tree2 <- sim.bdtree(n = 10)
tree2$node.label <- c(rep.int(1, 5), rep.int(2, (10-6)))
plot.phylo(tree2, show.node.label = TRUE)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
#Make dataframe
df_species <- tree$tip.label
df_regime <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 39))
df <- data.frame(df_species, df_regime) %>% rename(Genus_species = df_species, Reg = df_regime)
#Now sim
sim_dat <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
#Fit the data
sim_fit <- OUwie(phy = tree, data = sim_dat, model = "BMS")
#class(sim_fit) <- "OUwie"
a <- arbutus::arbutus(sim_fit)
class(sim_fit) <- "OUwie"
a <- arbutus::arbutus(sim_fit)
#Now sim
sim_dat <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
#Fit the data
sim_fit <- OUwie(phy = tree, data = sim_dat, model = "BMS")
View(sim_fit)
devtools::load_all(".")
class(sim_fit) <- "OUwie"
a <- arbutus::arbutus(sim_fit)
#make_unit_tree(sim_fit)
View(a)
a <- arbutus::arbutus(sim_fit) %>% pvalue_arbutus()
source("~/R/arbutus/deepertest.R")
a <- readRDS("deepertest_result")
View(a)
source("~/R/arbutus/deepertest.R")
a <- readRDS("deepertest_result")
View(a)
View(a)
library(OUwie)
library(tidyverse)
devtools::load_all()
#First simulate a tree and label it
tree <- sim.bdtree(n = 128, seed = 69)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
#Make dataframe
df_species <- tree$tip.label
df_regime <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 39))
df <- data.frame(df_species, df_regime) %>% rename(Genus_species = df_species, Reg = df_regime)
#Now sim
sim_dat <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
#Fit the data
sim_fit <- OUwie(phy = tree, data = sim_dat, model = "BMS")
sim_and_fit <- function(){
datasim <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
datafit <- OUwie(phy = tree, data = datasim, model = "BMS")
res <- arbutus(datafit)
}
run <- replicate(1000, sim_and_fit)
View(run)
#Deeper test
library(OUwie)
library(tidyverse)
devtools::load_all()
#First simulate a tree and label it
tree <- sim.bdtree(n = 128, seed = 69)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
#Make dataframe
df_species <- tree$tip.label
df_regime <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 39))
df <- data.frame(df_species, df_regime) %>% rename(Genus_species = df_species, Reg = df_regime)
#Now sim
sim_dat <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
#Fit the data
sim_fit <- OUwie(phy = tree, data = sim_dat, model = "BMS")
sim_and_fit <- function(){
datasim <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
datafit <- OUwie(phy = tree, data = datasim, model = "BMS")
res <- arbutus(datafit)
res
}
run <- replicate(1000, sim_and_fit)
View(run)
arby <- arbutus(sim_fit)
View(arby)
sim_and_fit <- function(){
datasim <- OUwie.sim(phy = tree, data = df, alpha = c(1e-10,1e-10,1e-10), sigma.sq = c(0.45,0.90,0.23), theta0 = 1.0, theta = c(0,0,0))
datafit <- OUwie(phy = tree, data = datasim, model = "BMS")
res <- arbutus(datafit)
res
}
run <- replicate(1000, sim_and_fit)
View(run)
run <- replicate(1000, sim_and_fit())
View(run)
test <- map_df(run, pvalue_arbutus())
test <- map_df(run, pvalue_arbutus)
test <- t(run)
View(test)
test2 <- map_df(test, function(x)x["p.values",])
test2 <- map_df(test, function(x)x[,"p.values"])
test2 <- map_df(test, function(x)x["p.values",1])
test[1,]
test[,1]
test2 <- test[,1]
View(test2)
test3 <- map_df(test2, funtion(x) x)
test3 <- map_df(test2, function(x) x)
View(test3)
run_df <- run[,1] %>% map_df(function(x)x)
View(run_df)
run_df %>% pivot_longer(cols = everything(), names_to = "tstat") %>%
ggplot(aes(value)) + geom_histogram(aes(y = ..density..)) + facet_wrap(~tstat, nrow = 1) + theme_bw()
View(df)
tree <- sim.bdtree(n = 128, seed = 69)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
tree <- sim.bdtree(n = 128, seed = 69)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
tree <- sim.bdtree(n = 128, seed = 69)
tree$node.label <- c(rep.int(1, 64), rep.int(2, (90-65)), rep.int(3, 38))
plot.phylo(tree, show.node.label = TRUE)
=======
install.packages("diversitree")
install.packages("gsl")
install.packages("diversitree")
install.packages("caper")
>>>>>>> 33bd64d08c6a8eab70a79cccdb5e752fe7c3fd50
